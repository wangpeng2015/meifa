<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 启用spring mvc 注解 -->
	<!-- <context:annotation-config /> -->
	<!-- 设置使用注解的类所在的jar包 -->
	<context:component-scan base-package="com.haier.kj.controller"></context:component-scan>

	<!-- 完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" /> -->
	<!--等价于上面注入两个bean   AnnotationMethodHandlerAdapter   DefaultAnnotationHandlerMapping-->
	
	<mvc:annotation-driven>
        <mvc:message-converters>
            <bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=utf-8</value>
                        <value>text/html;charset=UTF-8</value>
                        <value>text/json;charset=UTF-8</value>
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                        <property name="dateFormat">
                            <bean class="java.text.SimpleDateFormat">
                                <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss"/>
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
     
	<!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/content/" p:suffix=".jsp" />
	
	
	<!-- 会自动注册了validator  ConversionService  -->
    <!-- <mvc:annotation-driven validator="validator" conversion-service="conversion-service"/>
    以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass"  value="org.hibernate.validator.HibernateValidator"/>
        如果不加默认到 使用classpath下的 ValidationMessages.properties
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <bean id="conversion-service" class="org.springframework.format.support.FormattingConversionServiceFactoryBean"  />  -->
    
    
    <mvc:interceptors>
	   <mvc:interceptor>
		    <mvc:mapping path="/sign/**" />
		    <bean class="com.haier.interceptor.InterceptorDemo01" />
	   </mvc:interceptor>
 	</mvc:interceptors>
 	
 	<!--controller返回值的统一封装方法 -->
	<bean id="ControllerResultInterceptor" class="com.haier.interceptor.ControllerResultInterceptor">
	</bean>
	<aop:config>
		<aop:aspect id="controresultAop" ref="ControllerResultInterceptor">
			<aop:pointcut id="target"
				expression="execution(* com.haier.kj.controller.*Controller.*(..)) and args(..)" />
			<aop:around method="around" pointcut-ref="target" />
		</aop:aspect>
	</aop:config>
		
</beans>